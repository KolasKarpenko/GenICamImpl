#pragma once

#include "FrameData.h"

namespace gevdevice{

/**	GVSP Image Data Leader.
*/
typedef
struct _GVSP_Image_Leader
{
	GVSP_Leader GvspLeader;
	uint32_t PixelType;
	uint32_t SizeX;
	uint32_t SizeY;
	uint32_t OffsetX;
	uint32_t OffsetY;
	uint16_t PaddingX;
	uint16_t PaddingY;
} GVSP_Image_Leader;

/**	GVSP Image Data Trailer.
*/
typedef
struct _GVSP_Image_Trailer
{
	GVSP_Trailer GvspTrailer;
	uint32_t SizeY;
} GVSP_Image_Trailer;

//===================================================
// PIXEL TYPES
//===================================================
// Indicate if pixel is monochrome or RGB

#define GVSP_PIX_MONO						0x01000000
#define GVSP_PIX_RGB						0x02000000
#define GVSP_PIX_CUSTOM						0x80000000
#define GVSP_PIX_COLOR_MASK					0xFF000000
// Indicate effective number of bits occupied by the pixel (including padding).
// This can be used to compute amount of memory required to store an image.
#define GVSP_PIX_OCCUPY8BIT					0x00080000
#define GVSP_PIX_OCCUPY12BIT				0x000C0000
#define GVSP_PIX_OCCUPY16BIT				0x00100000
#define GVSP_PIX_OCCUPY24BIT				0x00180000
#define GVSP_PIX_OCCUPY32BIT				0x00200000
#define GVSP_PIX_OCCUPY36BIT				0x00240000
#define GVSP_PIX_OCCUPY48BIT				0x00300000
#define GVSP_PIX_EFFECTIVE_PIXEL_SIZE_MASK	0x00FF0000
#define GVSP_PIX_EFFECTIVE_PIXEL_SIZE_SHIFT	16
// Pixel ID: lower 16-bit of the pixel type
#define GVSP_PIX_ID_MASK					0x0000FFFF

typedef
enum _GVSP_PIXEL_TYPES
{
	// Mono
	GVSP_PIX_MONO8				= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY8BIT | 0x0001),
	GVSP_PIX_MONO8_SIGNED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY8BIT | 0x0002),
	GVSP_PIX_MONO10				= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x0003),
	GVSP_PIX_MONO10_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT | 0x0004),
	GVSP_PIX_MONO12				= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x0005),
	GVSP_PIX_MONO12_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT | 0x0006),
	GVSP_PIX_MONO16				= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x0007),

	// Bayer
	GVSP_PIX_BAYGR8				= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY8BIT | 0x0008),
	GVSP_PIX_BAYRG8				= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY8BIT | 0x0009),
	GVSP_PIX_BAYGB8				= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY8BIT | 0x000A),
	GVSP_PIX_BAYBG8				= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY8BIT | 0x000B),
	GVSP_PIX_BAYGR10			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x000C),
	GVSP_PIX_BAYRG10			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x000D),
	GVSP_PIX_BAYGB10			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x000E),
	GVSP_PIX_BAYBG10			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x000F),
	GVSP_PIX_BAYGR12			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x0010),
	GVSP_PIX_BAYRG12			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x0011),
	GVSP_PIX_BAYGB12			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x0012),
	GVSP_PIX_BAYBG12			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x0013),
	GVSP_PIX_BAYGR10_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT  | 0x0026),
	GVSP_PIX_BAYRG10_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT  | 0x0027),
	GVSP_PIX_BAYGB10_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT  | 0x0028),
	GVSP_PIX_BAYBG10_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT  | 0x0029),
	GVSP_PIX_BAYGR12_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT  | 0x002A),
	GVSP_PIX_BAYRG12_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT  | 0x002B),
	GVSP_PIX_BAYGB12_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT  | 0x002C),
	GVSP_PIX_BAYBG12_PACKED		= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY12BIT  | 0x002D),
	GVSP_PIX_BAYGR16			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x002E),
	GVSP_PIX_BAYRG16			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x002F),
	GVSP_PIX_BAYGB16			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x0030),
	GVSP_PIX_BAYBG16			= (GVSP_PIX_MONO | GVSP_PIX_OCCUPY16BIT | 0x0031),

	// RGB Packed
	GVSP_PIX_RGB8_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY24BIT | 0x0014),
	GVSP_PIX_BGR8_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY24BIT | 0x0015),
	GVSP_PIX_RGBA8_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY32BIT | 0x0016),
	GVSP_PIX_BGRA8_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY32BIT | 0x0017),
	GVSP_PIX_RGB10_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY48BIT | 0x0018),
	GVSP_PIX_BGR10_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY48BIT | 0x0019),
	GVSP_PIX_RGB12_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY48BIT | 0x001A),
	GVSP_PIX_BGR12_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY48BIT | 0x001B),
	GVSP_PIX_RGB16				= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY48BIT | 0x0033),
	GVSP_PIX_RGB10V1_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY32BIT | 0x001C),
	GVSP_PIX_RGB10V2_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY32BIT | 0x001D),

	// YUV
	GVSP_PIX_YUV411_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY12BIT | 0x001E),
	GVSP_PIX_YUV422_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY16BIT | 0x001F),
	GVSP_PIX_YUV422_YUYV_PACKED	= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY16BIT | 0x0032),
	GVSP_PIX_YUV444_PACKED		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY24BIT | 0x0020),

	// RGB Planar
	GVSP_PIX_RGB8_PLANAR		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY24BIT | 0x0021),
	GVSP_PIX_RGB10_PLANAR		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY48BIT | 0x0022),
	GVSP_PIX_RGB12_PLANAR		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY48BIT | 0x0023),
	GVSP_PIX_RGB16_PLANAR		= (GVSP_PIX_RGB | GVSP_PIX_OCCUPY48BIT | 0x0024)
}
GVSP_PIXEL_TYPES;

struct ImageData
{
	ImageData();
	ImageData(const FrameData& frameData);
	ImageData(FrameData&& frameData);

	void SetHeader(const GVSP_Image_Leader * leader);

	static ImageData Demosaic(const ImageData& image);

	GVSP_PIXEL_TYPES PixelType;
	uint32_t SizeX;
	uint32_t SizeY;
	uint32_t OffsetX;
	uint32_t OffsetY;
	uint16_t PaddingX;
	uint16_t PaddingY;
	uint64_t Timestamp;
	bool IsValid;
	size_t LostPackets = 0;
	std::vector<uint8_t> Bitmap;
};

}